
# Create and seperate the text from a column into columns for dataframe

mport pandas as pd

# Assuming your DataFrame is named 'df' and the column containing the strings is 'data'
df = pd.DataFrame({'data': ['Consumer Insurance, ABC, home loan, Customer Service']})

# Split the strings into a list of components
df['components'] = df['data'].str.split(', ')

# Create new columns from the list
df['Line of Business'] = df['components'].apply(lambda x: x[0])
df['Brand'] = df['components'].apply(lambda x: x[1])
df['Product'] = df['components'].apply(lambda x: x[2])
df['Business Unit'] = df['components'].apply(lambda x: x[3])

# Drop the temporary 'components' column
df.drop('components', axis=1, inplace=True)

print(df)


########################################## 

import time

def create_payload(dataframe):
    data_list = [
        {
            "questions": row["questions"],
            "filters": {
                "line_of_business": [row["line_of_business"]],
                "brand": [row["brand"]],
                "business_unit": [row["business_unit"]],
                "product": [row["product"]],
                "team": [item.strip() for item in row["team"].split(",")]
            }
        }
        for _, row in dataframe.iterrows()
    ]

    # Create the payload dictionary
    payload = {
        "dataframe_split": {
            "columns": ["questions", "filters"],
            "data": data_list
        }
    }

    payload_json = json.dumps(payload, allow_nan=True)

    return payload_json

def score_model(payload_json):
    url = "https://dev_env.cloud.databricks.com/serving-endpoints/project_dev_rag_pipiline/invocations"  # Replace with your actual endpoint URL

    headers = {
        'Authorization': f'Bearer {os.environ.get("DATABRICKS_TOKEN")}',
        'Content-Type': 'application/json'
    }

    # Send POST request
    response = requests.post(url, headers=headers, data=payload_json)

    # Check response status
    if response.status_code != 200:
        raise Exception(f'Request failed with status {response.status_code}, {response.text}')

    return response.json()

def process_dataframe(dataframe):
    # Initialize an empty list to store answers and metadata
    answers = []
    metadata = []

    for _, row in dataframe.iterrows():
        # Create payload JSON for the current row
        payload_json = create_payload({"dataframe_split": {
            "columns": ["questions", "filters"],
            "data": [{
                "questions": row["questions"],
                "filters": {
                    "line_of_business": [row["line_of_business"]],
                    "brand": [row["brand"]],
                    "business_unit": [row["business_unit"]],
                    "product": [row["product"]],
                    "team": [item.strip() for item in row["team"].split(",")]
                }
            }]
        }})

        # Call score_model and extract answers and metadata
        response = score_model(payload_json)
        try:
            answers.append(response["predictions"]["answers"])
            metadata.append(response["predictions"]["metadata"])
        except KeyError:
            # Handle cases where "predictions" or specific keys are missing
            print(f"Error processing row {row['questions']}: Missing keys in response.")

        # Add a 3-second sleep before the next iteration
        time.sleep(3)

    # Add answers and metadata columns to the DataFrame
    dataframe["answer"] = answers
    dataframe["metadata"] = metadata

    return dataframe

# Call the process_dataframe function with your DataFrame
processed_df = process_dataframe(your_dataframe.copy())
print(processed_df)
