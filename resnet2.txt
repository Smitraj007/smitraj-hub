import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import os
from PIL import Image

# Function to load and preprocess an image from file path
def load_image(filepath):
    image = Image.open(filepath).convert('RGB')
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    image = transform(image)
    return image

# Function to load ResNet50 model and extract features
def load_resnet50():
    model = models.resnet50(pretrained=True)
    model = nn.Sequential(*list(model.children())[:-1])  # Remove the last fully connected layer
    return model

# Function to extract embeddings using ResNet model
def extract_embeddings(model, image_paths):
    model.eval()
    embeddings = []
    with torch.no_grad():
        for img_path in image_paths:
            image = load_image(img_path)
            image = image.unsqueeze(0)  # Add batch dimension
            features = model(image)
            embeddings.append(features.squeeze().cpu().numpy())
    embeddings = np.array(embeddings)
    return embeddings

# Function to find similar images
def find_similar_images(query_embedding, dataset_embeddings, dataset_paths, top_n=5):
    similarities = cosine_similarity(query_embedding.reshape(1, -1), dataset_embeddings)
    indices = similarities.argsort()[0][::-1][:top_n]
    similar_images = [(dataset_paths[idx], similarities[0][idx]) for idx in indices]
    return similar_images

# Main function
def main():
    # Step 1: Define paths and load images from a local folder
    data_folder = 'path_to_your_folder_containing_images'
    image_paths = [os.path.join(data_folder, img) for img in os.listdir(data_folder)]

    # Step 2: Load pretrained ResNet50 model
    resnet_model = load_resnet50()

    # Step 3: Extract embeddings for all images in the folder
    dataset_embeddings = extract_embeddings(resnet_model, image_paths)
    dataset_paths = image_paths  # Store paths for reference

    # Step 4: Example of finding similar images (query image)
    query_image_path = 'path_to_your_query_image.jpg'
    query_embedding = extract_embeddings(resnet_model, [query_image_path])[0]

    # Find similar images
    similar_images = find_similar_images(query_embedding, dataset_embeddings, dataset_paths)

    # Print results
    print(f"Query Image: {query_image_path}")
    print("Similar Images:")
    for img_path, similarity in similar_images:
        print(f"- {img_path}, Similarity: {similarity:.4f}")

if __name__ == "__main__":
    main()
